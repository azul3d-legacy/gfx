// generated by stringer -type=TexWrap,FaceCullMode,TexFormat,DSFormat,AlphaMode,TexFilter,Primitive -output=stringers.go; DO NOT EDIT

package gfx

import "fmt"

const _TexWrap_name = "RepeatClampBorderColorMirror"

var _TexWrap_index = [...]uint8{0, 6, 11, 22, 28}

func (i TexWrap) String() string {
	if i+1 >= TexWrap(len(_TexWrap_index)) {
		return fmt.Sprintf("TexWrap(%d)", i)
	}
	return _TexWrap_name[_TexWrap_index[i]:_TexWrap_index[i+1]]
}

const _FaceCullMode_name = "BackFaceCullingFrontFaceCullingNoFaceCulling"

var _FaceCullMode_index = [...]uint8{0, 15, 31, 44}

func (i FaceCullMode) String() string {
	if i+1 >= FaceCullMode(len(_FaceCullMode_index)) {
		return fmt.Sprintf("FaceCullMode(%d)", i)
	}
	return _FaceCullMode_name[_FaceCullMode_index[i]:_FaceCullMode_index[i+1]]
}

const _TexFormat_name = "ZeroTexFormatRGBARGBDXT1DXT1RGBADXT3DXT5"

var _TexFormat_index = [...]uint8{0, 13, 17, 20, 24, 32, 36, 40}

func (i TexFormat) String() string {
	if i+1 >= TexFormat(len(_TexFormat_index)) {
		return fmt.Sprintf("TexFormat(%d)", i)
	}
	return _TexFormat_name[_TexFormat_index[i]:_TexFormat_index[i+1]]
}

const _DSFormat_name = "ZeroDSFormatDepth16Depth24Depth32Depth24AndStencil8"

var _DSFormat_index = [...]uint8{0, 12, 19, 26, 33, 51}

func (i DSFormat) String() string {
	if i+1 >= DSFormat(len(_DSFormat_index)) {
		return fmt.Sprintf("DSFormat(%d)", i)
	}
	return _DSFormat_name[_DSFormat_index[i]:_DSFormat_index[i+1]]
}

const _AlphaMode_name = "NoAlphaAlphaBlendBinaryAlphaAlphaToCoverage"

var _AlphaMode_index = [...]uint8{0, 7, 17, 28, 43}

func (i AlphaMode) String() string {
	if i+1 >= AlphaMode(len(_AlphaMode_index)) {
		return fmt.Sprintf("AlphaMode(%d)", i)
	}
	return _AlphaMode_name[_AlphaMode_index[i]:_AlphaMode_index[i+1]]
}

const _TexFilter_name = "NearestLinearNearestMipmapNearestLinearMipmapNearestNearestMipmapLinearLinearMipmapLinear"

var _TexFilter_index = [...]uint8{0, 7, 13, 33, 52, 71, 89}

func (i TexFilter) String() string {
	if i+1 >= TexFilter(len(_TexFilter_index)) {
		return fmt.Sprintf("TexFilter(%d)", i)
	}
	return _TexFilter_name[_TexFilter_index[i]:_TexFilter_index[i+1]]
}

const _Primitive_name = "TrianglesLinesPoints"

var _Primitive_index = [...]uint8{0, 9, 14, 20}

func (i Primitive) String() string {
	if i+1 >= Primitive(len(_Primitive_index)) {
		return fmt.Sprintf("Primitive(%d)", i)
	}
	return _Primitive_name[_Primitive_index[i]:_Primitive_index[i+1]]
}
